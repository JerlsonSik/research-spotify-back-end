[{"C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\index.js":"1","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\Home.js":"2","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\QuestionOne.js":"3","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\QuestionTwo.js":"4","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\QuestionThree.js":"5","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\NextButton.js":"6","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\reportWebVitals.js":"7","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\Emotion.js":"8","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\useCheckBox.js":"9","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\UserID.js":"10","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\Spotify.js":"11","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\SpotifyUser.js":"12","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\SpotifyGetPlaylists.js":"13","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\Test.js":"14","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\ExploreSpotify.js":"15","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\End.js":"16"},{"size":1737,"mtime":1690991098605,"results":"17","hashOfConfig":"18"},{"size":3427,"mtime":1690989085591,"results":"19","hashOfConfig":"18"},{"size":1995,"mtime":1689347939312,"results":"20","hashOfConfig":"18"},{"size":1028,"mtime":1689307647110,"results":"21","hashOfConfig":"18"},{"size":1613,"mtime":1689307631932,"results":"22","hashOfConfig":"18"},{"size":266,"mtime":1689285795883,"results":"23","hashOfConfig":"18"},{"size":397,"mtime":1688410230276,"results":"24","hashOfConfig":"18"},{"size":524,"mtime":1689307616105,"results":"25","hashOfConfig":"18"},{"size":1428,"mtime":1689307766772,"results":"26","hashOfConfig":"18"},{"size":1370,"mtime":1690989969836,"results":"27","hashOfConfig":"18"},{"size":1825,"mtime":1690951493957,"results":"28","hashOfConfig":"18"},{"size":1142,"mtime":1690951663125,"results":"29","hashOfConfig":"18"},{"size":17846,"mtime":1690951699806,"results":"30","hashOfConfig":"18"},{"size":1787,"mtime":1690771576141,"results":"31","hashOfConfig":"18"},{"size":3846,"mtime":1691648679502,"results":"32","hashOfConfig":"18"},{"size":264,"mtime":1690950753983,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19x9do7",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\index.js",[],[],"C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\Home.js",[],[],"C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\QuestionOne.js",["92","93","94","95","96","97"],[],"import useCheckBox from \"./useCheckBox\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useState } from \"react\";\r\n\r\nconst optionTwo = ['Male', 'Female', 'Other (please specify):' ]\r\nconst optionThree = ['African American/Black','Asian','Caucasian/White','Hispanic/Latino','Middle Eastern', 'Native American/Indigenous','Pacific Islander', 'Mixed Race','Other (please specify):']\r\n\r\n\r\nconst QuestionOne = () => {\r\n    const [optionOne,setOptionOne] = useState('')\r\n    const [optionTwo,setOptionTwo] = useState('')\r\n    const {render, optionValue} =  useCheckBox({optionArray: optionTwo})\r\n\r\n    const handleSubmit = async (e) => {\r\n        console.log({optionOne})\r\n        \r\n    }\r\n\r\n    const [check,setCheck] = useState(\"false\");\r\n\r\n    const checkInput = (inputValue) => {\r\n        \r\n        if(!inputValue.target.value.trim() ){\r\n            //setCheck = \"false\"\r\n            setCheck(\"false\");\r\n            console.log({check})\r\n        }\r\n\r\n        if(inputValue.target.value.trim() ){\r\n            //setCheck = \"false\"\r\n            setCheck(\"true\");\r\n            console.log({check})\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return ( \r\n    <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <label>1. Age: </label>\r\n            <input \r\n            type = \"number\" \r\n            onChange={(e) => setOptionOne(e.target.value)}\r\n            value = {optionOne}/>\r\n            \r\n        </div>\r\n        <div>\r\n            <label>2. Gender:</label>\r\n            {render}\r\n\r\n        </div>\r\n        <div>\r\n            <label>3. Ethnicity:</label>\r\n            {/* <useCheckBox optionArray={optionThree} />\r\n            {render} */}\r\n        </div>\r\n        <div>\r\n            <label>4. Primary Language you speck: </label>\r\n            <input type = \"text\" />\r\n        </div>\r\n        <div>\r\n            <label>5. Country you live: </label>\r\n            <input type = \"text\" />\r\n        </div>\r\n        <button>Next</button>\r\n    </form>\r\n     );\r\n}\r\n \r\nexport default QuestionOne;\r\n","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\QuestionTwo.js",["98"],[],"import NextButton from \"./NextButton\";\r\nimport useCheckBox from \"./useCheckBox\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst optionSix = ['Yes', 'No']\r\nconst optionSeven = ['Less than 1 year','1-3 years','3-5 years','More than 5 years']\r\nconst optinoEight = ['Free','Premium','Family Plan','Student Plan']\r\n\r\n \r\n\r\n\r\nconst QuestionTwo = () => {\r\n\r\n    return ( \r\n    <form>\r\n        <div>\r\n            <label>6. Are you a Spotify user? </label>\r\n            <useCheckBox optionArray = {optionSix} />\r\n        </div>\r\n        <div>\r\n            <label>7. If yes, how long have you been a Spotify user? </label>\r\n            <useCheckBox optionArray={optionSeven} />\r\n        </div>\r\n        <div>\r\n            <label>8. What type of Spotify membership do you have?</label>\r\n            <useCheckBox optionArray={optinoEight} />\r\n        </div>\r\n        <div>\r\n            <Link to=\"/questionthree\"><NextButton disabled = {false} /></Link>\r\n        </div>\r\n        \r\n    </form>\r\n     );\r\n}\r\n \r\nexport default QuestionTwo;\r\n","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\QuestionThree.js",["99","100","101","102"],[],"import NextButton from \"./NextButton\";\r\nimport useCheckBox from \"./useCheckBox\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst optionNine = ['Multiple times a day', 'Daily','Few times of week','Once a week','Rarely']\r\nconst optionTen = ['Home','Car','Work/Office','Gym','Outdoors','Public transportation','Other (please specify):']\r\nconst optionEleven = ['Yes', 'No']\r\n\r\n\r\nconst QuestionThree = () => {\r\n\r\n    const handleClick = () => {\r\n        window.location.href = 'https://cyberball.empirisoft.com/web?cbe=614af0d6-cfa2-4db9-851a-7ea41c0d0c91&condition=1&pid=';\r\n    }\r\n\r\n    return ( \r\n    <form>\r\n        <div>\r\n            <label>9. How often do you listen to music? </label>\r\n            <useCheckBox optionArray = {optionNine} />\r\n        </div>\r\n        <div>\r\n            <label>10.Where do you typically listen to music? </label>\r\n            <useCheckBox optionArray = {optionTen} />\r\n        </div>\r\n        <div>\r\n            <label>11. Have you ever received any formal training?</label>\r\n            <useCheckBox optionArray = {optionEleven}/>\r\n        </div>\r\n        <div>\r\n            <label>12. If yes, please specify the type of music training you have received (e.g., instrument lessons, vocal training, music theory classes, etc.)</label>\r\n            <input type=\"text\"></input>\r\n        </div>\r\n        <div>\r\n         <button>\r\n        <a href=\"https://cyberball.empirisoft.com/web?cbe=614af0d6-cfa2-4db9-851a-7ea41c0d0c91&condition=1&pid=\">\r\n          Next\r\n        </a>\r\n        </button>  \r\n        </div>\r\n        \r\n    </form>\r\n     );\r\n}\r\n \r\nexport default QuestionThree;\r\n","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\NextButton.js",[],[],[],"C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\reportWebVitals.js",[],[],"C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\Emotion.js",["103"],[],"import NextButton from \"./NextButton\";\r\nimport useCheckBox from \"./useCheckBox\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst emotion = ['Happy', 'Sad','Calm']\r\n\r\nconst Emotion = () => {\r\n    return ( \r\n        <div>\r\n            <label>How do you feel after playing cyberball? </label>\r\n            <useCheckBox optionArray = {emotion} />\r\n            <div>\r\n                <Link to=\"/questionthree\"><NextButton disabled = {false} /></Link>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Emotion;","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\useCheckBox.js",[],[],"C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\UserID.js",[],[],"C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\Spotify.js",["104","105"],[],"import { useState, useEffect } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Spotify.css';\r\n\r\nconst CLIENT_ID = \"ce27b5b63fa94b90b98bc7261357473b\"\r\nconst CLIENT_SECRET = \"982333282ecf4557ac8391349f257b0b\"\r\nconst REDIRECT_URL = \"http://localhost:3000/spotifyuser\"\r\nconst SPOTIFY_AUTHORIZE_ENDPOINT = \"https://accounts.spotify.com/authorize?\"\r\nconst SCOPES = [\"user-read-currently-playing\",\"user-read-playback-state\",\"playlist-read-private\",\"user-read-recently-played\",\"user-library-read\",\r\n                \"playlist-modify-public\",\"playlist-modify-private\",\"user-read-private\",\"user-read-email\"]\r\nconst toString = (SPOTIFY_AUTHORIZE_ENDPOINT+\"client_id=\"+CLIENT_ID+\"&redirect_uri=\"+REDIRECT_URL+\"&scope=\"+SCOPES+\"&response_type=token&show_dialog\")\r\n\r\nconst Spotify = () => {\r\n\r\n    const [userID,setUserID] = useState(\"\")\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const goToHomePage = () => navigate('/userid');\r\n\r\n        const fetchData = async () => {\r\n            // get the data from the api\r\n            const sessionData = await fetch('/survey');\r\n            // convert data to json\r\n            const json = await sessionData.json();\r\n            \r\n            setUserID(json.userID)\r\n\r\n            console.log(json.userID)\r\n\r\n            if(!sessionData.ok){\r\n                goToHomePage()\r\n            }\r\n\r\n        }\r\n\r\n        fetchData()\r\n\r\n    })\r\n\r\n    const handleLogIn = () => {\r\n\r\n        window.location = (toString)\r\n        \r\n    }\r\n\r\n\r\n    return ( \r\n        <div className=\"Spotify-Background\">\r\n            {/* <h1>This is the spotify page</h1>\r\n            <h1>{userID}</h1> */}\r\n            <button className=\"Spotify-Button\" onClick={handleLogIn}>Logged in spotify</button>\r\n        </div>\r\n        \r\n     );\r\n}\r\n \r\nexport default Spotify;","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\SpotifyUser.js",["106"],[],"import { useState, useEffect } from \"react\";\r\nimport SpotifyGetPlaylists from \"./SpotifyGetPlaylists\";\r\nimport './SpotifyUser.css';\r\n\r\nconst getReturnedAuth = (hash) => {\r\n    const stringHashTag = hash.substring(1);\r\n    const urlParams = stringHashTag.split(\"&\");\r\n    const paramsSplitUp = urlParams.reduce((accumulater,currentValue) => {\r\n        console.log(currentValue)\r\n        const [key,value] = currentValue.split(\"=\");\r\n        accumulater[key]=value;\r\n        return accumulater;\r\n    },{})\r\n\r\n    return paramsSplitUp\r\n}\r\n\r\n\r\n\r\nconst SpotifyUser = () => {\r\n\r\n    useEffect(() => {\r\n        if(window.location.hash){\r\n            const {access_token,expires_in, token_type} = getReturnedAuth(window.location.hash)\r\n            \r\n            localStorage.clear()\r\n            localStorage.setItem(\"accessToken\",access_token)\r\n            localStorage.setItem(\"expiresIn\",expires_in)\r\n            localStorage.setItem(\"tokenType\",token_type)\r\n        }\r\n    })\r\n    \r\n\r\n\r\n    return (  \r\n        <div className=\"SpotifyUser-Background\">\r\n            <SpotifyGetPlaylists/>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default SpotifyUser;","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\SpotifyGetPlaylists.js",["107","108","109","110","111","112","113","114","115"],[],"import axios from \"axios\"\r\nimport { useState, useEffect } from \"react\";\r\nimport { useNavigate} from 'react-router-dom';\r\n\r\nconst SpotifyGetPlaylists = () => {\r\n    \r\n    const navigate = useNavigate();\r\n\r\n    const CURRENT_PLAYING_ENDPOINT = \"https://api.spotify.com/v1/me/player/currently-playing\";\r\n    const [trackName, setTrackName] = useState()\r\n    const [playingTrackArray, setPlayingTrackArray] = useState([])\r\n    const [userID, setUserID] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        \r\n        //Implementing the setInterval method\r\n        const interval = setInterval(() => {\r\n            axios\r\n                .get(CURRENT_PLAYING_ENDPOINT,{\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                    },\r\n                    \r\n                })\r\n                .then((response) => {\r\n                    //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\r\n                    if(response.data.item.name !== trackName){\r\n                        console.log(\"New Tracks\")\r\n                        console.log(\"Listening track name:\",response.data.context.uri)\r\n                        console.log(\"Listening track name:\",response.data.item.name)\r\n                        setTrackName(response.data.item.name)\r\n                        setPlayingTrackArray(playingTrackArray => [...playingTrackArray, [response.data.timestamp,response.data.item.name,response.data.context.uri]])\r\n                    }\r\n                    \r\n                    // console.log(\"Listening track playlist:\",response.data.context.uri)\r\n                    // console.log(\"Listening track timestamp:\",response.data.timestamp)\r\n                    //console.log(getRandomProperty(response.data.items))\r\n                    \r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })\r\n        }, 1000);\r\n  \r\n        //Clearing the interval\r\n        return () => clearInterval(interval);\r\n        // return () => {setTimeout(()=>{\r\n        //     clearInterval(interval)\r\n        //     console.log(\"Interval Cleared\")\r\n        // },60000)}\r\n    }, );\r\n\r\n    // Actually all these is just for console.log display\r\n    const [token,setToken] = useState(\"\")\r\n    const [data, setData] = useState(\"\")\r\n    const [playlistID,setPlaylistID] = useState(\"\")\r\n    const itemUriArray = []\r\n    const allLikedSongsArray = []\r\n    const top40ItemUriArray = []\r\n\r\n    // useEffect to get the token \r\n    useEffect(() => {\r\n             \r\n        if(localStorage.accessToken){\r\n            setToken(localStorage.accessToken)\r\n        }\r\n\r\n        // this function is getting the userid\r\n        const goToHomePage = () => navigate('/userid');\r\n\r\n        const fetchData = async () => {\r\n            // get the data from the api\r\n            const sessionData = await fetch('/survey');\r\n            // convert data to json\r\n            const json = await sessionData.json();\r\n            \r\n            setUserID(json.userID)\r\n\r\n            console.log(\"UserID\",json.userID)\r\n\r\n            if(!sessionData.ok){\r\n                goToHomePage()\r\n            }\r\n\r\n        }\r\n\r\n        fetchData()\r\n        \r\n\r\n    },[])\r\n     \r\n    // handleGetUserID that trigger all the other function\r\n    const handleGetUserID = async () => {\r\n\r\n        let id = \"\"\r\n        let listID = \"\"\r\n        let listID2 = \"\" \r\n\r\n        const PLAYLIST_ENDPOINT = \"https://api.spotify.com/v1/me\"\r\n\r\n            await axios\r\n                .get(PLAYLIST_ENDPOINT,{\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                    },\r\n                    \r\n                })\r\n                .then((response) => {\r\n                    setData(response.data.id)\r\n                    id = response.data.id\r\n                    console.log(\"Token from set\",response.data)\r\n                    console.log(\"ID:\",response.data.id)\r\n                    // console.log(\"Timestamp:\",response.data.timestamp)\r\n                    // console.log(\"Token from set\",response)\r\n                    // console.log(\"Token from set\",data)\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })  \r\n        \r\n        //handleCreatePlaylists()\r\n        const CREATE_PLAYLIST_ENDPOINT = \"https://api.spotify.com/v1/users/\" \r\n        \r\n        const toString = (CREATE_PLAYLIST_ENDPOINT+id+\"/playlists\")\r\n\r\n        console.log(toString)\r\n        await axios.post(toString,\r\n                {\r\n                    name: \"Random Top40\"\r\n                },\r\n                {\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                    \r\n                })\r\n\r\n                .then((response) => {\r\n                    console.log(\"Playlist Added Successful\")\r\n                    setPlaylistID(response.data.id)\r\n                    listID = response.data.id\r\n                    \r\n                    \r\n                })\r\n\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                    \r\n                })\r\n\r\n        await axios.post(toString,\r\n                {\r\n                    name: \"Top 40\"\r\n                },\r\n                {\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                    \r\n                })\r\n\r\n                .then((response) => {\r\n                    console.log(\"Playlist Added Successful\")\r\n                    setPlaylistID(response.data.id)\r\n                    listID2 = response.data.id\r\n                    \r\n                    \r\n                })\r\n\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                    \r\n                })\r\n                \r\n        // handleGetLikedSongs()\r\n        const GET_LIKED_SONGS_ENDPOINT = \"https://api.spotify.com/v1/me/tracks?limit=50\"\r\n        let totalLiked = \"\"\r\n\r\n        await axios\r\n                .get(GET_LIKED_SONGS_ENDPOINT,{\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                    },\r\n                    \r\n                })\r\n                .then((response) => {\r\n                    \r\n                    console.log(\"User Liked Songs\",response.data.items)\r\n                    console.log(\"total\",response.data.total)\r\n                    totalLiked = response.data.total\r\n                    \r\n                    // if liked songs is less than 50\r\n                    if(response.data.total <= 50){\r\n                        if(response.data.total <= 40){\r\n                            const array = randomUniqueNum(response.data.items.length,response.data.items.length)\r\n\r\n                            for(let i = 0; i < array.length; i++){\r\n                                itemUriArray.push(response.data.items[array[i]].track.uri);\r\n                            }\r\n                        }\r\n                        if(response.data.total > 40){\r\n                            // getting random number\r\n                            const array = randomUniqueNum(response.data.items.length,40)\r\n                            // for loop to get the track uri\r\n                            for(let i = 0; i < array.length; i++){\r\n                                console.log(response.data.items[array[i]].track.uri);\r\n                                itemUriArray.push(response.data.items[array[i]].track.uri);\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })\r\n        \r\n        // if liked songs is more than 50\r\n        if(totalLiked > 50){\r\n            const array = randomUniqueNum(totalLiked,40)\r\n            console.log(array)\r\n            for(let i = 0; i <= Math.floor(totalLiked / 50); i++){\r\n                            \r\n                const offset = i*50\r\n                const GET_LIKED_SONGS_MORE_ENDPOINT = \"https://api.spotify.com/v1/me/tracks?limit=50&offset=\"\r\n                const toString = (GET_LIKED_SONGS_MORE_ENDPOINT+offset)\r\n                await axios\r\n                    .get(toString,{\r\n                        headers:{\r\n                            Authorization: \"Bearer \" + token,\r\n                        },\r\n                                    \r\n                    })\r\n                    .then((response) => {\r\n                        \r\n                        for(let i = 0; i < response.data.items.length; i++){\r\n                            allLikedSongsArray.push(response.data.items[i])\r\n                        }\r\n        \r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                    })\r\n                        \r\n            }\r\n            console.log(allLikedSongsArray)\r\n            for(let i = 0; i < array.length; i++){\r\n                itemUriArray.push(allLikedSongsArray[array[i]].track.uri)\r\n            }\r\n        }\r\n\r\n        if(totalLiked > 0){\r\n            const GET_RECENT_TOP_40_LIKED_SONGS= \"https://api.spotify.com/v1/me/tracks?limit=40&offset=0\"\r\n            await axios\r\n                    .get(GET_RECENT_TOP_40_LIKED_SONGS,{\r\n                        headers:{\r\n                            Authorization: \"Bearer \" + token,\r\n                        },\r\n                                    \r\n                    })\r\n                    .then((response) => {\r\n                        console.log(\"Length\",response.data.items.length)\r\n                        \r\n                        const array = randomUniqueNum(response.data.items.length,response.data.items.length)\r\n                        console.log(\"this is the array\",array)\r\n                        for(let i = 0; i < array.length; i++){\r\n                            top40ItemUriArray.push(response.data.items[array[i]].track.uri);\r\n                        }\r\n        \r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                    })\r\n        }\r\n\r\n       \r\n\r\n        // handleAddItem \r\n        const ADD_ITEM_ENDPOINT = \"https://api.spotify.com/v1/playlists/\"\r\n        //console.log(\"2\"+playlistID2)\r\n        const toString2 = (ADD_ITEM_ENDPOINT+listID+\"/tracks\")\r\n        console.log(\"ilst is\" +listID)\r\n        console.log(toString2)\r\n        console.log(itemUriArray)\r\n        const toString3 = (ADD_ITEM_ENDPOINT+listID2+\"/tracks\")\r\n        console.log(\"ilst is\" +listID2)\r\n        console.log(toString3)\r\n        console.log(top40ItemUriArray)\r\n\r\n        await axios.post(toString2,\r\n            {\r\n                uris: itemUriArray // random top 40\r\n            },\r\n            {\r\n                headers:{\r\n                    Authorization: \"Bearer \" + token,\r\n                    'Content-Type': 'application/json',\r\n                }\r\n                \r\n            })\r\n\r\n            .then((response) => {\r\n                console.log(\"Items Added Successful\")\r\n                setPlaylistID(response)\r\n            })\r\n\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n\r\n        await axios.post(toString3,\r\n            {\r\n                uris: top40ItemUriArray\r\n            },\r\n            {\r\n                headers:{\r\n                    Authorization: \"Bearer \" + token,\r\n                    'Content-Type': 'application/json',\r\n                }\r\n                \r\n            })\r\n\r\n            .then((response) => {\r\n                console.log(\"Items Added Successful\")\r\n                setPlaylistID(response)\r\n            })\r\n\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n        \r\n        // handle update single record\r\n        await axios \r\n            .patch(\"/survey/\"+userID,{\r\n                \"top40\": top40ItemUriArray,\r\n                \"randomTop40\": itemUriArray\r\n            })\r\n            .then((response) => {\r\n                console.log(response)\r\n            })\r\n        \r\n        // Open up Spotify\r\n        window.open(\"http://www.spotify.com/\",'_blank')\r\n        window.location = (\"http://localhost:3000/explorespotify\")\r\n    }\r\n\r\n    const handleCreatePlaylists = async () => {      \r\n        const CREATE_PLAYLIST_ENDPOINT = \"https://api.spotify.com/v1/users/\" \r\n        \r\n        const toString = (CREATE_PLAYLIST_ENDPOINT+data+\"/playlists\")\r\n\r\n        console.log(toString)\r\n        await axios.post(toString,\r\n                {\r\n                    name: \"Top2\"\r\n                },\r\n                {\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                    \r\n                })\r\n\r\n                .then((response) => {\r\n                    console.log(\"Playlist Added Successful\")\r\n                    setPlaylistID(response.data.id)\r\n                    \r\n                })\r\n\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                    \r\n                })    \r\n\r\n    } \r\n\r\n    const handleGetLikedSongs = async () => {\r\n        const GET_LIKED_SONGS_ENDPOINT = \"https://api.spotify.com/v1/me/tracks?limit=50\"\r\n        await axios\r\n                .get(GET_LIKED_SONGS_ENDPOINT,{\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                    },\r\n                    \r\n                })\r\n                .then((response) => {\r\n                    //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\r\n                    console.log(\"User Liked Songs\",response.data.items)\r\n                    //console.log(getRandomProperty(response.data.items))\r\n                    \r\n                    const array = randomUniqueNum(10,5)\r\n                    \r\n                    for(let i = 0; i < array.length; i++){\r\n                        console.log(response.data.items[array[i]].track.uri);\r\n                        itemUriArray.push(response.data.items[array[i]].track.uri);\r\n                    }\r\n                    \r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })  \r\n    }\r\n\r\n    const handleAddItem = async () => {\r\n        const ADD_ITEM_ENDPOINT = \"https://api.spotify.com/v1/playlists/\"\r\n        //console.log(\"2\"+playlistID2)\r\n        const toString = (ADD_ITEM_ENDPOINT+playlistID+\"/tracks\")\r\n        console.log(playlistID)\r\n        console.log(toString)\r\n        console.log(itemUriArray)\r\n\r\n        await axios.post(toString,\r\n            {\r\n                uris: itemUriArray\r\n            },\r\n            {\r\n                headers:{\r\n                    Authorization: \"Bearer \" + token,\r\n                    'Content-Type': 'application/json',\r\n                }\r\n                \r\n            })\r\n\r\n            .then((response) => {\r\n                console.log(\"Items Added Successful\")\r\n                setPlaylistID(response)\r\n            })\r\n\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n\r\n    const getCurrentPlaying = async () => {\r\n        const CURRENT_PLAYING_ENDPOINT = \"https://api.spotify.com/v1/me/player/currently-playing\"\r\n        await axios\r\n                .get(CURRENT_PLAYING_ENDPOINT,{\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                    },\r\n                    \r\n                })\r\n                .then((response) => {\r\n                    //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\r\n                    console.log(\"Listening track name:\",response.data)\r\n                    console.log(\"Listening track name:\",response.data.item.name)\r\n                    console.log(\"Listening track playlist:\",response.data.context.uri)\r\n                    console.log(\"Listening track timestamp:\",response.data.timestamp)\r\n                    //console.log(getRandomProperty(response.data.items))\r\n                    \r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })\r\n    }\r\n\r\n    function randomUniqueNum(range, outputCount) {\r\n\r\n        let arr = []\r\n        for (let i = 0; i <= range; i++) {\r\n          arr.push(i)\r\n        }\r\n      \r\n        let result = [];\r\n      \r\n        for (let i = 1; i <= outputCount; i++) {\r\n          const random = Math.floor(Math.random() * (range - i));\r\n          result.push(arr[random]);\r\n          arr[random] = arr[range - i];\r\n        }\r\n      \r\n        return result;\r\n    }\r\n\r\n    // This is the function that trigger everythings\r\n    const handleStartSpotify = async () => {\r\n        console.log(\"Start Here\")\r\n        handleGetUserID()\r\n        //handleGetLikedSongs()\r\n        //handleAddItem()\r\n    }\r\n\r\n    const getArray = async () => {\r\n        console.log(playingTrackArray)\r\n    }\r\n\r\n    const getSingleRecord = async () => {\r\n        await axios\r\n            .get(\"/survey/\"+userID)\r\n            .then((response) => {\r\n                console.log(\"Message\",response)\r\n            })\r\n    }\r\n\r\n    const updateSingleRecord = async () => {\r\n        await axios \r\n            .patch(\"/survey/\"+\"newnew\",{\r\n                \"top40\": [\"88\"],\r\n            })\r\n            .then((response) => {\r\n                console.log(response)\r\n            })\r\n    }\r\n\r\n    return ( \r\n        <div>\r\n            <button className=\"SpotifyUser-Button\" onClick={handleStartSpotify}>Go to Spotify</button>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default SpotifyGetPlaylists;","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\Test.js",["116"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from \"axios\"\r\n\r\nconst Test = () => {\r\n    const [count, setCount] = useState(0);\r\n    const CURRENT_PLAYING_ENDPOINT = \"https://api.spotify.com/v1/me/player/currently-playing\";\r\n    const token = \"BQD8Z97R2x2YUK6STsH5kPSVPtYskymCKoF-vLBn6NuokK26zvSDL6IjXjrFDbQ-_VTQeEcsBXeLrrn9-i32JChID_ggRss6PEKoYQDR-S4yPaStS1ptHe0scA_-i9g9G-ARLjjd8nPZof6plnXHljcvOY97DNZH5EGLHiLHFcPgbEMALe4fqisXMBUK23aRFAHjWyg9XjPY2623udPFlVORYk0GS-pMvN_RPAFZ965OweDXaki72LkjtEBXRAqE-p5GXt_CrTvDKKI13LjXBiTy9gdfT4S6E1n9crBNObA\"\r\n  \r\n    useEffect(() => {\r\n\r\n        \r\n\r\n        //Implementing the setInterval method\r\n        const interval = setInterval(() => {\r\n            axios\r\n                .get(CURRENT_PLAYING_ENDPOINT,{\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                    },\r\n                    \r\n                })\r\n                .then((response) => {\r\n                    //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\r\n                    console.log(\"Listening track name:\",response.data)\r\n                    // console.log(\"Listening track name:\",response.data.item.name)\r\n                    // console.log(\"Listening track playlist:\",response.data.context.uri)\r\n                    // console.log(\"Listening track timestamp:\",response.data.timestamp)\r\n                    //console.log(getRandomProperty(response.data.items))\r\n                    \r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })\r\n        }, 1000);\r\n  \r\n        //Clearing the interval\r\n        return () => clearInterval(interval);\r\n    }, );\r\n    \r\n    \r\n\r\n    return <h1>{count}</h1>;\r\n}\r\n  \r\nexport default Test;","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\ExploreSpotify.js",["117"],[],"import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\"\r\nimport { useNavigate} from 'react-router-dom';\r\nimport './ExploreSpotify.css';\r\n\r\nconst ExploreSpotify = () => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const CURRENT_PLAYING_ENDPOINT = \"https://api.spotify.com/v1/me/player/currently-playing\";\r\n    const [trackName, setTrackName] = useState()\r\n    const [playingTrackArray, setPlayingTrackArray] = useState([])\r\n    const [token,setToken] = useState(\"\")\r\n    const [count, setCount] = useState(0);\r\n    const [userID, setUserID] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n             \r\n        if(localStorage.accessToken){\r\n            setToken(localStorage.accessToken)\r\n        }\r\n\r\n        const goToHomePage = () => navigate('/userid');\r\n\r\n        const fetchData = async () => {\r\n            // get the data from the api\r\n            const sessionData = await fetch('/survey');\r\n            // convert data to json\r\n            const json = await sessionData.json();\r\n            \r\n            setUserID(json.userID)\r\n\r\n            console.log(\"UserID\",json.userID)\r\n\r\n            if(!sessionData.ok){\r\n                goToHomePage()\r\n            }\r\n\r\n        }\r\n\r\n        fetchData()\r\n        \r\n    },[])\r\n\r\n    useEffect(() => {\r\n        \r\n        console.log({count})\r\n        if(count<60){\r\n            \r\n        \r\n            //Implementing the setInterval method\r\n            const interval = setInterval(() => {\r\n                setCount(count+1)\r\n                axios\r\n                    .get(CURRENT_PLAYING_ENDPOINT,{\r\n                        headers:{\r\n                            Authorization: \"Bearer \" + token,\r\n                        },\r\n                        \r\n                    })\r\n                    .then((response) => {\r\n                        //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\r\n                        \r\n                        if(response.data.item.name !== trackName){\r\n                            console.log(\"New Tracks\")\r\n                            console.log(\"Listening track name:\",response.data.context.uri)\r\n                            console.log(\"Listening track name:\",response.data.item.name)\r\n                            setTrackName(response.data.item.name)\r\n                            setPlayingTrackArray(playingTrackArray => [...playingTrackArray, [response.data.timestamp,response.data.item.name,response.data.context.uri]])\r\n                        }\r\n                        \r\n                        // console.log(\"Listening track playlist:\",response.data.context.uri)\r\n                        // console.log(\"Listening track timestamp:\",response.data.timestamp)\r\n                        //console.log(getRandomProperty(response.data.items))\r\n                        \r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                    })\r\n            }, 1000);\r\n    \r\n            //Clearing the interval\r\n            return () => clearInterval(interval);\r\n            // return () => {setTimeout(()=>{\r\n            //     clearInterval(interval)\r\n            //     console.log(\"Interval Cleared\")\r\n            // },60000)}\r\n        }else{\r\n            // handle update single record\r\n            axios \r\n            .patch(\"/survey/\"+userID,{\r\n                \"playedSong\": playingTrackArray\r\n            })\r\n            .then((response) => {\r\n                console.log(response)\r\n                window.location = (\"https://purdue.ca1.qualtrics.com/jfe/form/SV_3wwnGJR5XZIuMS2\")\r\n            })\r\n        }\r\n        \r\n    }, );\r\n\r\n    return ( \r\n        <div className=\"ExploreSpotify-Background\">\r\n            <h2 className=\"ExploreSpotify-H2\">You would have 5 minutes to explore spotify</h2>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default ExploreSpotify;","C:\\Users\\PC\\Desktop\\Research\\myapp\\src\\End.js",[],[],{"ruleId":"118","severity":1,"message":"119","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":14},{"ruleId":"118","severity":1,"message":"122","line":5,"column":7,"nodeType":"120","messageId":"121","endLine":5,"endColumn":16},{"ruleId":"118","severity":1,"message":"123","line":6,"column":7,"nodeType":"120","messageId":"121","endLine":6,"endColumn":18},{"ruleId":"118","severity":1,"message":"124","line":11,"column":22,"nodeType":"120","messageId":"121","endLine":11,"endColumn":34},{"ruleId":"118","severity":1,"message":"125","line":12,"column":20,"nodeType":"120","messageId":"121","endLine":12,"endColumn":31},{"ruleId":"118","severity":1,"message":"126","line":21,"column":11,"nodeType":"120","messageId":"121","endLine":21,"endColumn":21},{"ruleId":"118","severity":1,"message":"127","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":19},{"ruleId":"118","severity":1,"message":"128","line":1,"column":8,"nodeType":"120","messageId":"121","endLine":1,"endColumn":18},{"ruleId":"118","severity":1,"message":"127","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":14},{"ruleId":"118","severity":1,"message":"129","line":12,"column":11,"nodeType":"120","messageId":"121","endLine":12,"endColumn":22},{"ruleId":"118","severity":1,"message":"127","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":19},{"ruleId":"118","severity":1,"message":"130","line":6,"column":7,"nodeType":"120","messageId":"121","endLine":6,"endColumn":20},{"ruleId":"118","severity":1,"message":"131","line":15,"column":12,"nodeType":"120","messageId":"121","endLine":15,"endColumn":18},{"ruleId":"118","severity":1,"message":"132","line":1,"column":10,"nodeType":"120","messageId":"121","endLine":1,"endColumn":18},{"ruleId":"133","severity":1,"message":"134","line":90,"column":7,"nodeType":"135","endLine":90,"endColumn":9,"suggestions":"136"},{"ruleId":"118","severity":1,"message":"137","line":348,"column":11,"nodeType":"120","messageId":"121","endLine":348,"endColumn":32},{"ruleId":"118","severity":1,"message":"138","line":379,"column":11,"nodeType":"120","messageId":"121","endLine":379,"endColumn":30},{"ruleId":"118","severity":1,"message":"139","line":406,"column":11,"nodeType":"120","messageId":"121","endLine":406,"endColumn":24},{"ruleId":"118","severity":1,"message":"140","line":437,"column":11,"nodeType":"120","messageId":"121","endLine":437,"endColumn":28},{"ruleId":"118","severity":1,"message":"141","line":486,"column":11,"nodeType":"120","messageId":"121","endLine":486,"endColumn":19},{"ruleId":"118","severity":1,"message":"142","line":490,"column":11,"nodeType":"120","messageId":"121","endLine":490,"endColumn":26},{"ruleId":"118","severity":1,"message":"143","line":498,"column":11,"nodeType":"120","messageId":"121","endLine":498,"endColumn":29},{"ruleId":"144","severity":1,"message":"145","line":500,"column":30,"nodeType":"146","messageId":"147","endLine":500,"endColumn":31},{"ruleId":"118","severity":1,"message":"148","line":5,"column":19,"nodeType":"120","messageId":"121","endLine":5,"endColumn":27},{"ruleId":"133","severity":1,"message":"134","line":43,"column":7,"nodeType":"135","endLine":43,"endColumn":9,"suggestions":"149"},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'optionTwo' is assigned a value but never used.","'optionThree' is assigned a value but never used.","'setOptionTwo' is assigned a value but never used.","'optionValue' is assigned a value but never used.","'checkInput' is assigned a value but never used.","'useCheckBox' is defined but never used.","'NextButton' is defined but never used.","'handleClick' is assigned a value but never used.","'CLIENT_SECRET' is assigned a value but never used.","'userID' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["150"],"'handleCreatePlaylists' is assigned a value but never used.","'handleGetLikedSongs' is assigned a value but never used.","'handleAddItem' is assigned a value but never used.","'getCurrentPlaying' is assigned a value but never used.","'getArray' is assigned a value but never used.","'getSingleRecord' is assigned a value but never used.","'updateSingleRecord' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'setCount' is assigned a value but never used.",["151"],{"desc":"152","fix":"153"},{"desc":"152","fix":"154"},"Update the dependencies array to be: [navigate]",{"range":"155","text":"156"},{"range":"157","text":"156"},[3216,3218],"[navigate]",[1237,1239]]