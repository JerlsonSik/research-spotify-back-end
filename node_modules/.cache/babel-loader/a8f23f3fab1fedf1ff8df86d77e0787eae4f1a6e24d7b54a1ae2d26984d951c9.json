{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\Research\\\\myapp\\\\src\\\\ExploreSpotify.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExploreSpotify = () => {\n  _s();\n  const CURRENT_PLAYING_ENDPOINT = \"https://api.spotify.com/v1/me/player/currently-playing\";\n  const [trackName, setTrackName] = useState();\n  const [playingTrackArray, setPlayingTrackArray] = useState([]);\n  const [token, setToken] = useState(\"\");\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    if (localStorage.accessToken) {\n      setToken(localStorage.accessToken);\n    }\n  }, []);\n  useEffect(() => {\n    console.log({\n      count\n    });\n    if ({\n      count\n    } > 0) {\n      console.log(\"Greater\");\n    }\n    //Implementing the setInterval method\n    const interval = setInterval(() => {\n      setCount(count + 1);\n      axios.get(CURRENT_PLAYING_ENDPOINT, {\n        headers: {\n          Authorization: \"Bearer \" + token\n        }\n      }).then(response => {\n        //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\n\n        if (response.data.item.name !== trackName) {\n          console.log(\"New Tracks\");\n          console.log(\"Listening track name:\", response.data.context.uri);\n          console.log(\"Listening track name:\", response.data.item.name);\n          setTrackName(response.data.item.name);\n          setPlayingTrackArray(playingTrackArray => [...playingTrackArray, [response.data.timestamp, response.data.item.name, response.data.context.uri]]);\n        }\n\n        // console.log(\"Listening track playlist:\",response.data.context.uri)\n        // console.log(\"Listening track timestamp:\",response.data.timestamp)\n        //console.log(getRandomProperty(response.data.items))\n      }).catch(error => {\n        console.log(error);\n      });\n    }, 1000);\n\n    //Clearing the interval\n    return () => clearInterval(interval);\n    // return () => {setTimeout(()=>{\n    //     clearInterval(interval)\n    //     console.log(\"Interval Cleared\")\n    // },60000)}\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You would have 5 minutes to explore spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: playingTrackArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(ExploreSpotify, \"EB7mN5ncd8U6LJzi5MWPP5bAyMU=\");\n_c = ExploreSpotify;\nexport default ExploreSpotify;\nvar _c;\n$RefreshReg$(_c, \"ExploreSpotify\");","map":{"version":3,"names":["useEffect","useState","axios","jsxDEV","_jsxDEV","ExploreSpotify","_s","CURRENT_PLAYING_ENDPOINT","trackName","setTrackName","playingTrackArray","setPlayingTrackArray","token","setToken","count","setCount","localStorage","accessToken","console","log","interval","setInterval","get","headers","Authorization","then","response","data","item","name","context","uri","timestamp","catch","error","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PC/Desktop/Research/myapp/src/ExploreSpotify.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\"\r\n\r\nconst ExploreSpotify = () => {\r\n\r\n    const CURRENT_PLAYING_ENDPOINT = \"https://api.spotify.com/v1/me/player/currently-playing\";\r\n    const [trackName, setTrackName] = useState()\r\n    const [playingTrackArray, setPlayingTrackArray] = useState([])\r\n    const [token,setToken] = useState(\"\")\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n             \r\n        if(localStorage.accessToken){\r\n            setToken(localStorage.accessToken)\r\n        }\r\n\r\n        \r\n    },[])\r\n\r\n    useEffect(() => {\r\n        \r\n        console.log({count})\r\n        if({count}>0){\r\n            console.log(\"Greater\")\r\n        }\r\n        //Implementing the setInterval method\r\n        const interval = setInterval(() => {\r\n            setCount(count+1)\r\n            axios\r\n                .get(CURRENT_PLAYING_ENDPOINT,{\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                    },\r\n                    \r\n                })\r\n                .then((response) => {\r\n                    //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\r\n                    \r\n                    if(response.data.item.name !== trackName){\r\n                        console.log(\"New Tracks\")\r\n                        console.log(\"Listening track name:\",response.data.context.uri)\r\n                        console.log(\"Listening track name:\",response.data.item.name)\r\n                        setTrackName(response.data.item.name)\r\n                        setPlayingTrackArray(playingTrackArray => [...playingTrackArray, [response.data.timestamp,response.data.item.name,response.data.context.uri]])\r\n                    }\r\n                    \r\n                    // console.log(\"Listening track playlist:\",response.data.context.uri)\r\n                    // console.log(\"Listening track timestamp:\",response.data.timestamp)\r\n                    //console.log(getRandomProperty(response.data.items))\r\n                    \r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })\r\n        }, 1000);\r\n  \r\n        //Clearing the interval\r\n        return () => clearInterval(interval);\r\n        // return () => {setTimeout(()=>{\r\n        //     clearInterval(interval)\r\n        //     console.log(\"Interval Cleared\")\r\n        // },60000)}\r\n    \r\n    }, );\r\n\r\n    return ( \r\n        <div>\r\n            <p>You would have 5 minutes to explore spotify</p>\r\n            <p>{count}</p>\r\n            <p>{playingTrackArray}</p>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default ExploreSpotify;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEzB,MAAMC,wBAAwB,GAAG,wDAAwD;EACzF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,CAAC;EAC5C,MAAM,CAACS,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACW,KAAK,EAACC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAErCD,SAAS,CAAC,MAAM;IAEZ,IAAGgB,YAAY,CAACC,WAAW,EAAC;MACxBJ,QAAQ,CAACG,YAAY,CAACC,WAAW,CAAC;IACtC;EAGJ,CAAC,EAAC,EAAE,CAAC;EAELjB,SAAS,CAAC,MAAM;IAEZkB,OAAO,CAACC,GAAG,CAAC;MAACL;IAAK,CAAC,CAAC;IACpB,IAAG;MAACA;IAAK,CAAC,GAAC,CAAC,EAAC;MACTI,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAC1B;IACA;IACA,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BN,QAAQ,CAACD,KAAK,GAAC,CAAC,CAAC;MACjBZ,KAAK,CACAoB,GAAG,CAACf,wBAAwB,EAAC;QAC1BgB,OAAO,EAAC;UACJC,aAAa,EAAE,SAAS,GAAGZ;QAC/B;MAEJ,CAAC,CAAC,CACDa,IAAI,CAAEC,QAAQ,IAAK;QAChB;;QAEA,IAAGA,QAAQ,CAACC,IAAI,CAACC,IAAI,CAACC,IAAI,KAAKrB,SAAS,EAAC;UACrCU,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;UACzBD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAACO,QAAQ,CAACC,IAAI,CAACG,OAAO,CAACC,GAAG,CAAC;UAC9Db,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAACO,QAAQ,CAACC,IAAI,CAACC,IAAI,CAACC,IAAI,CAAC;UAC5DpB,YAAY,CAACiB,QAAQ,CAACC,IAAI,CAACC,IAAI,CAACC,IAAI,CAAC;UACrClB,oBAAoB,CAACD,iBAAiB,IAAI,CAAC,GAAGA,iBAAiB,EAAE,CAACgB,QAAQ,CAACC,IAAI,CAACK,SAAS,EAACN,QAAQ,CAACC,IAAI,CAACC,IAAI,CAACC,IAAI,EAACH,QAAQ,CAACC,IAAI,CAACG,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;QAClJ;;QAEA;QACA;QACA;MAEJ,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;QACdhB,OAAO,CAACC,GAAG,CAACe,KAAK,CAAC;MACtB,CAAC,CAAC;IACV,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMC,aAAa,CAACf,QAAQ,CAAC;IACpC;IACA;IACA;IACA;EAEJ,CAAG,CAAC;;EAEJ,oBACIhB,OAAA;IAAAgC,QAAA,gBACIhC,OAAA;MAAAgC,QAAA,EAAG;IAA2C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAClDpC,OAAA;MAAAgC,QAAA,EAAItB;IAAK;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACdpC,OAAA;MAAAgC,QAAA,EAAI1B;IAAiB;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEd,CAAC;AAAAlC,EAAA,CAtEKD,cAAc;AAAAoC,EAAA,GAAdpC,cAAc;AAwEpB,eAAeA,cAAc;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}