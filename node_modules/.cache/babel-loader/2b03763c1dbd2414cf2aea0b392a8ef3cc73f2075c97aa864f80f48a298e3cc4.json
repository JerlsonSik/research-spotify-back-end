{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\Research\\\\myapp\\\\src\\\\SpotifyGetPlaylists.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyGetPlaylists = () => {\n  _s();\n  const CURRENT_PLAYING_ENDPOINT = \"https://api.spotify.com/v1/me/player/currently-playing\";\n  const [trackName, setTrackName] = useState();\n  const [playingTrackArray, setPlayingTrackArray] = useState([]);\n  useEffect(() => {\n    //Implementing the setInterval method\n    const interval = setInterval(() => {\n      axios.get(CURRENT_PLAYING_ENDPOINT, {\n        headers: {\n          Authorization: \"Bearer \" + token\n        }\n      }).then(response => {\n        //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\n        if (response.data.item.name != trackName) {\n          console.log(\"New Tracks\");\n          console.log(\"Listening track name:\", response.data);\n          console.log(\"Listening track name:\", response.data.item.name);\n          setTrackName(response.data.item.name);\n          setPlayingTrackArray(playingTrackArray => [...playingTrackArray, [response.data.timestamp, response.data.item.name]]);\n        }\n\n        // console.log(\"Listening track playlist:\",response.data.context.uri)\n        // console.log(\"Listening track timestamp:\",response.data.timestamp)\n        //console.log(getRandomProperty(response.data.items))\n      }).catch(error => {\n        console.log(error);\n      });\n    }, 2000);\n\n    //Clearing the interval\n    return () => clearInterval(interval);\n  });\n\n  // Actually all these is just for console.log display\n  const [token, setToken] = useState(\"\");\n  const [data, setData] = useState(\"\");\n  const [playlistID, setPlaylistID] = useState(\"\");\n  const itemUriArray = [];\n\n  // useEffect to get the token \n  useEffect(() => {\n    if (localStorage.accessToken) {\n      setToken(localStorage.accessToken);\n    }\n  }, []);\n\n  // handleGetUserID that trigger all the other function\n  const handleGetUserID = async () => {\n    let id = \"\";\n    let listID = \"\";\n    const PLAYLIST_ENDPOINT = \"https://api.spotify.com/v1/me\";\n    await axios.get(PLAYLIST_ENDPOINT, {\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    }).then(response => {\n      setData(response.data.id);\n      id = response.data.id;\n      console.log(\"Token from set\", response.data);\n      console.log(\"ID:\", response.data.id);\n      // console.log(\"Timestamp:\",response.data.timestamp)\n      // console.log(\"Token from set\",response)\n      // console.log(\"Token from set\",data)\n    }).catch(error => {\n      console.log(error);\n    });\n\n    //handleCreatePlaylists()\n    const CREATE_PLAYLIST_ENDPOINT = \"https://api.spotify.com/v1/users/\";\n    const toString = CREATE_PLAYLIST_ENDPOINT + id + \"/playlists\";\n    console.log(toString);\n    await axios.post(toString, {\n      name: \"Top40\"\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + token,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      console.log(\"Playlist Added Successful\");\n      setPlaylistID(response.data.id);\n      listID = response.data.id;\n    }).catch(error => {\n      console.log(error);\n    });\n\n    // handleGetLikedSongs()\n    const GET_LIKED_SONGS_ENDPOINT = \"https://api.spotify.com/v1/me/tracks?limit=50\";\n    await axios.get(GET_LIKED_SONGS_ENDPOINT, {\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    }).then(response => {\n      console.log(\"User Liked Songs\", response.data.items);\n      console.log(\"total\", response.data.total);\n\n      // if liked songs is less than 50\n      if (response.data.total <= 50) {\n        // getting random number\n        const array = randomUniqueNum(10, 5);\n        // for loop to get the track uri\n        for (let i = 0; i < array.length; i++) {\n          console.log(response.data.items[array[i]].track.uri);\n          itemUriArray.push(response.data.items[array[i]].track.uri);\n        }\n      }\n\n      // if liked songs is more than 50\n      if (response.data.total > 50) {\n        for (let i = 1; i <= Math.floor(response.data.total / 50) + 1; i++) {\n          const offset = i * 50;\n          const GET_LIKED_SONGS_MORE_ENDPOINT = \"https://api.spotify.com/v1/me/tracks?limit=50&offset=\";\n          const toString = GET_LIKED_SONGS_MORE_ENDPOINT + offset;\n          console.log(toString);\n        }\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n\n    // handleAddItem \n    const ADD_ITEM_ENDPOINT = \"https://api.spotify.com/v1/playlists/\";\n    //console.log(\"2\"+playlistID2)\n    const toString2 = ADD_ITEM_ENDPOINT + listID + \"/tracks\";\n    console.log(\"ilst is\" + listID);\n    console.log(toString2);\n    console.log(itemUriArray);\n    await axios.post(toString2, {\n      uris: itemUriArray\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + token,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      console.log(\"Items Added Successful\");\n      setPlaylistID(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const handleCreatePlaylists = async () => {\n    const CREATE_PLAYLIST_ENDPOINT = \"https://api.spotify.com/v1/users/\";\n    const toString = CREATE_PLAYLIST_ENDPOINT + data + \"/playlists\";\n    console.log(toString);\n    await axios.post(toString, {\n      name: \"Top2\"\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + token,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      console.log(\"Playlist Added Successful\");\n      setPlaylistID(response.data.id);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const handleGetLikedSongs = async () => {\n    const GET_LIKED_SONGS_ENDPOINT = \"https://api.spotify.com/v1/me/tracks?limit=50\";\n    await axios.get(GET_LIKED_SONGS_ENDPOINT, {\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    }).then(response => {\n      //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\n      console.log(\"User Liked Songs\", response.data.items);\n      //console.log(getRandomProperty(response.data.items))\n\n      const array = randomUniqueNum(10, 5);\n      for (let i = 0; i < array.length; i++) {\n        console.log(response.data.items[array[i]].track.uri);\n        itemUriArray.push(response.data.items[array[i]].track.uri);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const handleAddItem = async () => {\n    const ADD_ITEM_ENDPOINT = \"https://api.spotify.com/v1/playlists/\";\n    //console.log(\"2\"+playlistID2)\n    const toString = ADD_ITEM_ENDPOINT + playlistID + \"/tracks\";\n    console.log(playlistID);\n    console.log(toString);\n    console.log(itemUriArray);\n    await axios.post(toString, {\n      uris: itemUriArray\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + token,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      console.log(\"Items Added Successful\");\n      setPlaylistID(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const getCurrentPlaying = async () => {\n    const CURRENT_PLAYING_ENDPOINT = \"https://api.spotify.com/v1/me/player/currently-playing\";\n    await axios.get(CURRENT_PLAYING_ENDPOINT, {\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    }).then(response => {\n      //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\n      console.log(\"Listening track name:\", response.data);\n      console.log(\"Listening track name:\", response.data.item.name);\n      console.log(\"Listening track playlist:\", response.data.context.uri);\n      console.log(\"Listening track timestamp:\", response.data.timestamp);\n      //console.log(getRandomProperty(response.data.items))\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  function randomUniqueNum(range, outputCount) {\n    let arr = [];\n    for (let i = 1; i <= range; i++) {\n      arr.push(i);\n    }\n    let result = [];\n    for (let i = 1; i <= outputCount; i++) {\n      const random = Math.floor(Math.random() * (range - i));\n      result.push(arr[random]);\n      arr[random] = arr[range - i];\n    }\n    return result;\n  }\n\n  // This is the function that trigger everythings\n  const handleStartSpotify = async () => {\n    console.log(\"Start Here\");\n    handleGetUserID();\n    //handleGetLikedSongs()\n    //handleAddItem()\n  };\n\n  const getArray = async () => {\n    console.log(playingTrackArray);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartSpotify,\n      children: \"Start Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getCurrentPlaying,\n      children: \"Get Playing Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getArray,\n      children: \"Get Array\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: playingTrackArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 9\n  }, this);\n};\n_s(SpotifyGetPlaylists, \"qAesoU9ZnxtKNxyhl5e/RA0Mjow=\");\n_c = SpotifyGetPlaylists;\nexport default SpotifyGetPlaylists;\nvar _c;\n$RefreshReg$(_c, \"SpotifyGetPlaylists\");","map":{"version":3,"names":["axios","useState","useEffect","jsxDEV","_jsxDEV","SpotifyGetPlaylists","_s","CURRENT_PLAYING_ENDPOINT","trackName","setTrackName","playingTrackArray","setPlayingTrackArray","interval","setInterval","get","headers","Authorization","token","then","response","data","item","name","console","log","timestamp","catch","error","clearInterval","setToken","setData","playlistID","setPlaylistID","itemUriArray","localStorage","accessToken","handleGetUserID","id","listID","PLAYLIST_ENDPOINT","CREATE_PLAYLIST_ENDPOINT","toString","post","GET_LIKED_SONGS_ENDPOINT","items","total","array","randomUniqueNum","i","length","track","uri","push","Math","floor","offset","GET_LIKED_SONGS_MORE_ENDPOINT","ADD_ITEM_ENDPOINT","toString2","uris","handleCreatePlaylists","handleGetLikedSongs","handleAddItem","getCurrentPlaying","context","range","outputCount","arr","result","random","handleStartSpotify","getArray","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PC/Desktop/Research/myapp/src/SpotifyGetPlaylists.js"],"sourcesContent":["import axios from \"axios\"\r\nimport { useState, useEffect } from \"react\";\r\n\r\n\r\n\r\n\r\nconst SpotifyGetPlaylists = () => {\r\n    \r\n    const CURRENT_PLAYING_ENDPOINT = \"https://api.spotify.com/v1/me/player/currently-playing\";\r\n    const [trackName, setTrackName] = useState()\r\n    const [playingTrackArray, setPlayingTrackArray] = useState([])\r\n\r\n    useEffect(() => {\r\n\r\n        //Implementing the setInterval method\r\n        const interval = setInterval(() => {\r\n            axios\r\n                .get(CURRENT_PLAYING_ENDPOINT,{\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                    },\r\n                    \r\n                })\r\n                .then((response) => {\r\n                    //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\r\n                    if(response.data.item.name != trackName){\r\n                        console.log(\"New Tracks\")\r\n                        console.log(\"Listening track name:\",response.data)\r\n                        console.log(\"Listening track name:\",response.data.item.name)\r\n                        setTrackName(response.data.item.name)\r\n                        setPlayingTrackArray(playingTrackArray => [...playingTrackArray, [response.data.timestamp,response.data.item.name]])\r\n                    }\r\n                    \r\n                    // console.log(\"Listening track playlist:\",response.data.context.uri)\r\n                    // console.log(\"Listening track timestamp:\",response.data.timestamp)\r\n                    //console.log(getRandomProperty(response.data.items))\r\n                    \r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })\r\n        }, 2000);\r\n  \r\n        //Clearing the interval\r\n        return () => clearInterval(interval);\r\n    }, );\r\n\r\n    // Actually all these is just for console.log display\r\n    const [token,setToken] = useState(\"\")\r\n    const [data, setData] = useState(\"\")\r\n    const [playlistID,setPlaylistID] = useState(\"\")\r\n    const itemUriArray = []\r\n\r\n    // useEffect to get the token \r\n    useEffect(() => {\r\n             \r\n        if(localStorage.accessToken){\r\n            setToken(localStorage.accessToken)\r\n        }\r\n        \r\n\r\n    },[])\r\n     \r\n    // handleGetUserID that trigger all the other function\r\n    const handleGetUserID = async () => {\r\n\r\n        let id = \"\"\r\n        let listID = \"\"\r\n\r\n        const PLAYLIST_ENDPOINT = \"https://api.spotify.com/v1/me\"\r\n\r\n            await axios\r\n                .get(PLAYLIST_ENDPOINT,{\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                    },\r\n                    \r\n                })\r\n                .then((response) => {\r\n                    setData(response.data.id)\r\n                    id = response.data.id\r\n                    console.log(\"Token from set\",response.data)\r\n                    console.log(\"ID:\",response.data.id)\r\n                    // console.log(\"Timestamp:\",response.data.timestamp)\r\n                    // console.log(\"Token from set\",response)\r\n                    // console.log(\"Token from set\",data)\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })  \r\n        \r\n        //handleCreatePlaylists()\r\n        const CREATE_PLAYLIST_ENDPOINT = \"https://api.spotify.com/v1/users/\" \r\n        \r\n        const toString = (CREATE_PLAYLIST_ENDPOINT+id+\"/playlists\")\r\n\r\n        console.log(toString)\r\n        await axios.post(toString,\r\n                {\r\n                    name: \"Top40\"\r\n                },\r\n                {\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                    \r\n                })\r\n\r\n                .then((response) => {\r\n                    console.log(\"Playlist Added Successful\")\r\n                    setPlaylistID(response.data.id)\r\n                    listID = response.data.id\r\n                    \r\n                    \r\n                })\r\n\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                    \r\n                })\r\n                \r\n        // handleGetLikedSongs()\r\n        const GET_LIKED_SONGS_ENDPOINT = \"https://api.spotify.com/v1/me/tracks?limit=50\"\r\n        await axios\r\n                .get(GET_LIKED_SONGS_ENDPOINT,{\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                    },\r\n                    \r\n                })\r\n                .then((response) => {\r\n                    \r\n                    console.log(\"User Liked Songs\",response.data.items)\r\n                    console.log(\"total\",response.data.total)\r\n                    \r\n                    // if liked songs is less than 50\r\n                    if(response.data.total <= 50){\r\n                        // getting random number\r\n                        const array = randomUniqueNum(10,5)\r\n                        // for loop to get the track uri\r\n                        for(let i = 0; i < array.length; i++){\r\n                            console.log(response.data.items[array[i]].track.uri);\r\n                            itemUriArray.push(response.data.items[array[i]].track.uri);\r\n                        }\r\n                    }\r\n\r\n                    // if liked songs is more than 50\r\n                    if(response.data.total > 50){\r\n                        for(let i = 1; i <= Math.floor(response.data.total / 50)+1; i++){\r\n                            const offset = i*50\r\n                            const GET_LIKED_SONGS_MORE_ENDPOINT = \"https://api.spotify.com/v1/me/tracks?limit=50&offset=\"\r\n                            const toString = (GET_LIKED_SONGS_MORE_ENDPOINT+offset)\r\n                            console.log(toString)\r\n                        }\r\n                    }\r\n                    \r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })\r\n\r\n        // handleAddItem \r\n        const ADD_ITEM_ENDPOINT = \"https://api.spotify.com/v1/playlists/\"\r\n        //console.log(\"2\"+playlistID2)\r\n        const toString2 = (ADD_ITEM_ENDPOINT+listID+\"/tracks\")\r\n        console.log(\"ilst is\" +listID)\r\n        console.log(toString2)\r\n        console.log(itemUriArray)\r\n\r\n        await axios.post(toString2,\r\n            {\r\n                uris: itemUriArray\r\n            },\r\n            {\r\n                headers:{\r\n                    Authorization: \"Bearer \" + token,\r\n                    'Content-Type': 'application/json',\r\n                }\r\n                \r\n            })\r\n\r\n            .then((response) => {\r\n                console.log(\"Items Added Successful\")\r\n                setPlaylistID(response)\r\n            })\r\n\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n        \r\n    }\r\n\r\n    const handleCreatePlaylists = async () => {      \r\n        const CREATE_PLAYLIST_ENDPOINT = \"https://api.spotify.com/v1/users/\" \r\n        \r\n        const toString = (CREATE_PLAYLIST_ENDPOINT+data+\"/playlists\")\r\n\r\n        console.log(toString)\r\n        await axios.post(toString,\r\n                {\r\n                    name: \"Top2\"\r\n                },\r\n                {\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                    \r\n                })\r\n\r\n                .then((response) => {\r\n                    console.log(\"Playlist Added Successful\")\r\n                    setPlaylistID(response.data.id)\r\n                    \r\n                })\r\n\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                    \r\n                })    \r\n\r\n    } \r\n\r\n    const handleGetLikedSongs = async () => {\r\n        const GET_LIKED_SONGS_ENDPOINT = \"https://api.spotify.com/v1/me/tracks?limit=50\"\r\n        await axios\r\n                .get(GET_LIKED_SONGS_ENDPOINT,{\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                    },\r\n                    \r\n                })\r\n                .then((response) => {\r\n                    //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\r\n                    console.log(\"User Liked Songs\",response.data.items)\r\n                    //console.log(getRandomProperty(response.data.items))\r\n                    \r\n                    const array = randomUniqueNum(10,5)\r\n                    \r\n                    for(let i = 0; i < array.length; i++){\r\n                        console.log(response.data.items[array[i]].track.uri);\r\n                        itemUriArray.push(response.data.items[array[i]].track.uri);\r\n                    }\r\n                    \r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })  \r\n    }\r\n\r\n    const handleAddItem = async () => {\r\n        const ADD_ITEM_ENDPOINT = \"https://api.spotify.com/v1/playlists/\"\r\n        //console.log(\"2\"+playlistID2)\r\n        const toString = (ADD_ITEM_ENDPOINT+playlistID+\"/tracks\")\r\n        console.log(playlistID)\r\n        console.log(toString)\r\n        console.log(itemUriArray)\r\n\r\n        await axios.post(toString,\r\n            {\r\n                uris: itemUriArray\r\n            },\r\n            {\r\n                headers:{\r\n                    Authorization: \"Bearer \" + token,\r\n                    'Content-Type': 'application/json',\r\n                }\r\n                \r\n            })\r\n\r\n            .then((response) => {\r\n                console.log(\"Items Added Successful\")\r\n                setPlaylistID(response)\r\n            })\r\n\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n\r\n    const getCurrentPlaying = async () => {\r\n        const CURRENT_PLAYING_ENDPOINT = \"https://api.spotify.com/v1/me/player/currently-playing\"\r\n        await axios\r\n                .get(CURRENT_PLAYING_ENDPOINT,{\r\n                    headers:{\r\n                        Authorization: \"Bearer \" + token,\r\n                    },\r\n                    \r\n                })\r\n                .then((response) => {\r\n                    //console.log(\"User Liked Songs\",response.data.items[0].track.uri)\r\n                    console.log(\"Listening track name:\",response.data)\r\n                    console.log(\"Listening track name:\",response.data.item.name)\r\n                    console.log(\"Listening track playlist:\",response.data.context.uri)\r\n                    console.log(\"Listening track timestamp:\",response.data.timestamp)\r\n                    //console.log(getRandomProperty(response.data.items))\r\n                    \r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })\r\n    }\r\n\r\n    function randomUniqueNum(range, outputCount) {\r\n\r\n        let arr = []\r\n        for (let i = 1; i <= range; i++) {\r\n          arr.push(i)\r\n        }\r\n      \r\n        let result = [];\r\n      \r\n        for (let i = 1; i <= outputCount; i++) {\r\n          const random = Math.floor(Math.random() * (range - i));\r\n          result.push(arr[random]);\r\n          arr[random] = arr[range - i];\r\n        }\r\n      \r\n        return result;\r\n    }\r\n\r\n    // This is the function that trigger everythings\r\n    const handleStartSpotify = async () => {\r\n        console.log(\"Start Here\")\r\n        handleGetUserID()\r\n        //handleGetLikedSongs()\r\n        //handleAddItem()\r\n    }\r\n\r\n    const getArray = async () => {\r\n        console.log(playingTrackArray)\r\n    }\r\n\r\n    return ( \r\n        <div>\r\n            <button onClick={handleStartSpotify}>Start Spotify</button>\r\n            <button onClick={getCurrentPlaying}>Get Playing Songs</button>\r\n            <button onClick={getArray}>Get Array</button>\r\n            <p>{playingTrackArray}</p>\r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default SpotifyGetPlaylists;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}